{"ast":null,"code":"var _jsxFileName = \"/home/cedcoss/Downloads/liquidTestApp/src/components/Tasks/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Tasks from \"./Tasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-app-38291-default-rtdb.firebaseio.com/tasks.json');\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Tasks, {\n    items: tasks,\n    loading: isLoading,\n    error: error,\n    onFetch: fetchTasks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskList, \"47V/V/up9U9rSJyqYIMJNeWJ16w=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/home/cedcoss/Downloads/liquidTestApp/src/components/Tasks/TaskList.js"],"names":["useEffect","useState","Tasks","TaskList","isLoading","setIsLoading","error","setError","tasks","setTasks","fetchTasks","taskText","response","fetch","ok","Error","data","json","loadedTasks","taskKey","push","id","text","err","message","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMS,UAAU,GAAG,MAAOC,QAAP,IAAoB;AACnCN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACJ,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CACxB,gEADwB,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AACxBE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcG;AAAnC,SAAjB;AACH;;AAEDb,MAAAA,QAAQ,CAACS,WAAD,CAAR;AACC,KAlBD,CAkBE,OAAOK,GAAP,EAAY;AACdhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACC;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAzBD;;AA2BAL,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMe,cAAc,GAAIC,IAAD,IAAU;AAC7BjB,IAAAA,QAAQ,CAAEkB,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACH,GAFD;;AAIA,sBAEI,QAAC,KAAD;AACA,IAAA,KAAK,EAAElB,KADP;AAEA,IAAA,OAAO,EAAEJ,SAFT;AAGA,IAAA,KAAK,EAAEE,KAHP;AAIA,IAAA,OAAO,EAAEI;AAJT;AAAA;AAAA;AAAA;AAAA,UAFJ;AASH,CAhDD;;GAAMP,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Tasks from \"./Tasks\";\n\nconst TaskList = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [tasks, setTasks] = useState([]);\n\n    const fetchTasks = async (taskText) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n        const response = await fetch(\n            'https://react-app-38291-default-rtdb.firebaseio.com/tasks.json'\n        );\n\n        if (!response.ok) {\n            throw new Error('Request failed!');\n        }\n\n        const data = await response.json();\n\n        const loadedTasks = [];\n\n        for (const taskKey in data) {\n            loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n        }\n\n        setTasks(loadedTasks);\n        } catch (err) {\n        setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n    const taskAddHandler = (task) => {\n        setTasks((prevTasks) => prevTasks.concat(task));\n    };\n\n    return(\n        \n        <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    );\n}\n\nexport default TaskList;"]},"metadata":{},"sourceType":"module"}