{"ast":null,"code":"var _jsxFileName = \"/home/cedcoss/Desktop/test-app/liquidTestApp/src/components/Test/Questionaire.js\",\n    _s = $RefreshSig$();\n\nimport Questions from \"./Questions\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Questionaire = () => {\n  _s();\n\n  const [quesNum, setQuesNum] = useState(0);\n  const [answers, setAnswers] = useState([]);\n\n  const fetchTasks = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-app-38291-default-rtdb.firebaseio.com/tasks.json');\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  const fetchQuestions = [{\n    \"qno\": 0,\n    \"question\": \"Liquid in based on which technology?\",\n    \"options\": [\"React\", \"Ruby\", \"Java\", \"Pyhton\"],\n    \"answer\": \"Ruby\"\n  }, {\n    \"qno\": 1,\n    \"question\": \"What is the role files containing in 'Locale' folder?\",\n    \"options\": [\"Rendering html in themes\", \"Translating content in themes\", \"Contains theme data\", \"None of these\"],\n    \"answer\": \"Ruby\"\n  }];\n\n  const questionsHandler = num => {\n    setQuesNum(num);\n  };\n\n  const answersHandler = ans => {\n    setAnswers([ans, ...answers]);\n  };\n\n  console.log(answers);\n  return /*#__PURE__*/_jsxDEV(Questions, {\n    questions: fetchQuestions,\n    setQuesNum: questionsHandler,\n    quesNum: quesNum,\n    setAns: answersHandler,\n    ans: answers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Questionaire, \"FqGTIp2eRtd+AOMl9OBStYssWTY=\");\n\n_c = Questionaire;\nexport default Questionaire;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionaire\");","map":{"version":3,"sources":["/home/cedcoss/Desktop/test-app/liquidTestApp/src/components/Test/Questionaire.js"],"names":["Questions","useState","Questionaire","quesNum","setQuesNum","answers","setAnswers","fetchTasks","taskText","setIsLoading","setError","response","fetch","ok","Error","data","json","loadedTasks","taskKey","push","id","text","setTasks","err","message","fetchQuestions","questionsHandler","num","answersHandler","ans","console","log"],"mappings":";;;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAyBH,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMM,UAAU,GAAG,MAAOC,QAAP,IAAoB;AACnCC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACJ,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,gEADwB,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AACxBE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcG;AAAnC,SAAjB;AACH;;AAEDC,MAAAA,QAAQ,CAACL,WAAD,CAAR;AACC,KAlBD,CAkBE,OAAOM,GAAP,EAAY;AACdb,MAAAA,QAAQ,CAACa,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACC;;AACDf,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAzBD;;AA0BA,QAAMgB,cAAc,GAAG,CACnB;AACI,WAAO,CADX;AAEI,gBAAY,sCAFhB;AAGI,eAAW,CACP,OADO,EACE,MADF,EACU,MADV,EACkB,QADlB,CAHf;AAMI,cAAU;AANd,GADmB,EASnB;AACI,WAAO,CADX;AAEI,gBAAY,uDAFhB;AAGI,eAAW,CACP,0BADO,EACqB,+BADrB,EACsD,qBADtD,EAC6E,eAD7E,CAHf;AAMI,cAAU;AANd,GATmB,CAAvB;;AAmBA,QAAMC,gBAAgB,GAAIC,GAAD,IAAS;AAC9BvB,IAAAA,UAAU,CAACuB,GAAD,CAAV;AACH,GAFD;;AAGA,QAAMC,cAAc,GAAIC,GAAD,IAAS;AAC5BvB,IAAAA,UAAU,CAAC,CAACuB,GAAD,EAAM,GAAGxB,OAAT,CAAD,CAAV;AACH,GAFD;;AAGAyB,EAAAA,OAAO,CAACC,GAAR,CAAY1B,OAAZ;AACA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAEoB,cAAtB;AAAsC,IAAA,UAAU,EAAEC,gBAAlD;AAAoE,IAAA,OAAO,EAAEvB,OAA7E;AAAsF,IAAA,MAAM,EAAEyB,cAA9F;AAA8G,IAAA,GAAG,EAAEvB;AAAnH;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA1DD;;GAAMH,Y;;KAAAA,Y;AA4DN,eAAeA,YAAf","sourcesContent":["\nimport Questions from \"./Questions\";\nimport { useState } from \"react\";\nconst Questionaire = () => {\n    const [quesNum, setQuesNum] =  useState(0);\n    const [answers, setAnswers] = useState([]);\n    const fetchTasks = async (taskText) => {\n        setIsLoading(true);\n        setError(null);\n        try {\n        const response = await fetch(\n            'https://react-app-38291-default-rtdb.firebaseio.com/tasks.json'\n        );\n\n        if (!response.ok) {\n            throw new Error('Request failed!');\n        }\n\n        const data = await response.json();\n\n        const loadedTasks = [];\n\n        for (const taskKey in data) {\n            loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n        }\n\n        setTasks(loadedTasks);\n        } catch (err) {\n        setError(err.message || 'Something went wrong!');\n        }\n        setIsLoading(false);\n    };\n    const fetchQuestions = [\n        {\n            \"qno\": 0,\n            \"question\": \"Liquid in based on which technology?\",\n            \"options\": [\n                \"React\", \"Ruby\", \"Java\", \"Pyhton\"\n            ],\n            \"answer\": \"Ruby\"\n        },\n        {\n            \"qno\": 1,\n            \"question\": \"What is the role files containing in 'Locale' folder?\",\n            \"options\": [\n                \"Rendering html in themes\", \"Translating content in themes\", \"Contains theme data\", \"None of these\"\n            ],\n            \"answer\": \"Ruby\"\n        }\n    ];\n\n    const questionsHandler = (num) => {\n        setQuesNum(num);\n    }\n    const answersHandler = (ans) => {\n        setAnswers([ans, ...answers]);\n    }\n    console.log(answers);\n    return(\n        <Questions questions={fetchQuestions} setQuesNum={questionsHandler} quesNum={quesNum} setAns={answersHandler} ans={answers}/>\n    );\n}\n\nexport default Questionaire;"]},"metadata":{},"sourceType":"module"}