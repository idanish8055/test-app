{"ast":null,"code":"var _jsxFileName = \"/home/cedcoss/Desktop/MyApp/liquidTestApp/src/components/Test/Questionaire.js\",\n    _s = $RefreshSig$();\n\nimport Questions from \"./Questions\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Questionaire = () => {\n  _s();\n\n  const [quesNum, setQuesNum] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [questions, setQuestions] = useState([]);\n\n  const fetchQues = async () => {\n    try {\n      const response = await fetch('https://react-app-38291-default-rtdb.firebaseio.com/questions.json');\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedQuestions = [];\n\n      for (const quesKey in data) {\n        loadedQuestions.push({\n          id: quesKey,\n          question: data[quesKey].data\n        });\n      }\n\n      setQuestions(loadedQuestions);\n    } catch (err) {//setError(err.message || 'Something went wrong!');\n    }\n  };\n\n  useEffect(() => {\n    fetchQues();\n  }, []);\n\n  const questionsHandler = num => {\n    setQuesNum(num);\n  };\n\n  const answersHandler = ans => {\n    setAnswers([ans, ...answers]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: questions.length > 0 ? /*#__PURE__*/_jsxDEV(Questions, {\n      questions: questions,\n      setQuesNum: questionsHandler,\n      quesNum: quesNum,\n      setAns: answersHandler,\n      ans: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 38\n    }, this) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Questionaire, \"miS3YvWS/LNfRLMqBab25VYIu1c=\");\n\n_c = Questionaire;\nexport default Questionaire;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questionaire\");","map":{"version":3,"sources":["/home/cedcoss/Desktop/MyApp/liquidTestApp/src/components/Test/Questionaire.js"],"names":["Questions","React","useState","useEffect","Questionaire","quesNum","setQuesNum","answers","setAnswers","questions","setQuestions","fetchQues","response","fetch","ok","Error","data","json","loadedQuestions","quesKey","push","id","question","err","questionsHandler","num","answersHandler","ans","length"],"mappings":";;;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAyBJ,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMS,SAAS,GAAG,YAAY;AAC1B,QAAI;AACJ,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,oEADwB,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,eAAe,GAAG,EAAxB;;AAEA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AACxBE,QAAAA,eAAe,CAACE,IAAhB,CAAqB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,QAAQ,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcH;AAAvC,SAArB;AACH;;AACDN,MAAAA,YAAY,CAACQ,eAAD,CAAZ;AACC,KAjBD,CAiBE,OAAOK,GAAP,EAAY,CACZ;AACD;AACJ,GArBD;;AAuBApB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMa,gBAAgB,GAAIC,GAAD,IAAS;AAC9BnB,IAAAA,UAAU,CAACmB,GAAD,CAAV;AACH,GAFD;;AAGA,QAAMC,cAAc,GAAIC,GAAD,IAAS;AAC5BnB,IAAAA,UAAU,CAAC,CAACmB,GAAD,EAAM,GAAGpB,OAAT,CAAD,CAAV;AACH,GAFD;;AAGA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,cACME,SAAS,CAACmB,MAAV,GAAmB,CAAnB,gBAAuB,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEnB,SAAtB;AAAiC,MAAA,UAAU,EAAEe,gBAA7C;AAA+D,MAAA,OAAO,EAAEnB,OAAxE;AAAiF,MAAA,MAAM,EAAEqB,cAAzF;AAAyG,MAAA,GAAG,EAAEnB;AAA9G;AAAA;AAAA;AAAA;AAAA,YAAvB,GAAkJ;AADxJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1CD;;GAAMH,Y;;KAAAA,Y;AA4CN,eAAeA,YAAf","sourcesContent":["\nimport Questions from \"./Questions\";\nimport React, { useState, useEffect } from \"react\";\nconst Questionaire = () => {\n    const [quesNum, setQuesNum] =  useState(0);\n    const [answers, setAnswers] = useState([]);\n    const [questions, setQuestions] = useState([]);\n\n    const fetchQues = async () => {\n        try {\n        const response = await fetch(\n            'https://react-app-38291-default-rtdb.firebaseio.com/questions.json'\n        );\n\n        if (!response.ok) {\n            throw new Error('Request failed!');\n        }\n\n        const data = await response.json();\n\n        const loadedQuestions = [];\n\n        for (const quesKey in data) {\n            loadedQuestions.push({ id: quesKey, question: data[quesKey].data });\n        }\n        setQuestions(loadedQuestions);\n        } catch (err) {\n          //setError(err.message || 'Something went wrong!');\n        }\n    };\n\n    useEffect(() => {\n        fetchQues();\n    }, []);\n    const questionsHandler = (num) => {\n        setQuesNum(num);\n    }\n    const answersHandler = (ans) => {\n        setAnswers([ans, ...answers]);\n    }\n    return(\n        <React.Fragment>\n            { questions.length > 0 ? <Questions questions={questions} setQuesNum={questionsHandler} quesNum={quesNum} setAns={answersHandler} ans={answers}/> : \"\"}\n        </React.Fragment>\n    );\n}\n\nexport default Questionaire;"]},"metadata":{},"sourceType":"module"}